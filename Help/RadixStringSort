package dsaii.sorting;

import dsaii.lists.List;
import dsaii.lists.LinkedList;

import java.lang.reflect.Array;
import java.util.Random;

public class RadixStringSort {
    private static final int BASE = 27;

    private static Random random = new Random();
    private static List<String>[] buckets;

    /**
     * Static initialisation of the bucket array (here we are assuming that
     * the numbers are base 10 - hence 10 buckets)
     */
    static {
        buckets = (List<String>[]) Array.newInstance(List.class, BASE);
        for (int i=0; i < BASE; i++) {
            buckets[i] = new LinkedList<String>();
        }

    }
    /**
     * Simple test method
     *
     * @param args
     */
    public static void main(String[] args) {
        radixSort("the small tabby cat sat on the big red mat");
    	//radixSort("z q b g k h o i l i k h t r s v s j v z e t x v n e"); test on a random string of letters
    }

    public static void radixSort(String text) {
        List<String> S = new LinkedList<String>();
        int d = 0;
        // Convert the text to a list of words...
        for (String word : text.split( " ")) {
            S.insertLast(word);
            if(word.length() > d) {
            	d = word.length();
            }
        }
        System.out.println("Original string:\n");
        System.out.println(S);
        radixSort(S, d);
        System.out.println("Sorted String\n");
        System.out.println(S);
    }
    /**
     * The top level radix sort method for Vectors of Integer values (with d digits)
     * @param S the values to be sorted
     */
    public static void radixSort(List<String> S, int d) {
    	for(int i = 0; i<d;i++) {
    		bucketSort(S, d, i);
    	}
    }

    /**
     * Performs a stable bucket sort for a given digit
     * @param S the vector to be sorted
     * @param d the max number of digits
     * @param i the digit to be sorted on
     */
    private static void bucketSort(List<String> S, int d, int i) {
    	
    	while (!S.isEmpty()) {
            String word = S.remove(S.first());
            int index;
            if(word.length() < d-i) {
                index = 0;   
            }
            else {
                char ch = word.charAt(d-i-1);
                index = ch - 'a' + 1;
            }
            buckets[index].insertLast(word);
    	}
    	for (List<String> bucket : buckets) {
            while (!bucket.isEmpty()) {
                S.insertLast(bucket.remove(bucket.first()));
            }
        }
    }
}
